'''
    В реализации: функции рассылки письма на Яндек почту и ВКонтакте. А так же логика диалога с Алисой
    (Дата -> (подтверждение даты) -> Место -> (подтверждение места) -> Пользователи, которым необходимо
    прислать приглашение на встречу -> (подтверждение по каждому пользователю). Так же обработка
    исключений (пользователь не был найден).

    Так как данный навык, помогает быстро без импользования экрана назначать встречи. То предполагаеться
    его использование голосом (за исключением авторизации пользователся в Яндекс почту и ВКонтаке).

    Данный навык подходит абсолютно всем: малой компании для назначения деловых встреч;
                                          друзьям, которые хотят погулять вмести;
                                          учителям, которые хотят организовать
                                          родительское собрание и т.д
'''

import random

# Словарь команд пользователей и ответа на данные команды Алисой
commands = {'start': ['создать встречу', 'назначить встречу', 'организовать встречу'], # Команды для начала создания встречи
            'info': ['что ты умеешь?', 'что ты делаешь?', 'как ты работаешь?'],  # Команды для запроса функционала
            'help': ['помощь', 'помоги', 'нужна помощь'],  # Команды для запроса помощи
            'end': ['пока', 'до свидания', 'до скорой встречи', 'конец', 'закончить']}  # Команды завершения навыка

answering = {'help': ['Для того чтобы организвать встречу скажите: Назначить встречу. Для окончания диалога скажите: Пока.',
                   'Скажите: Назначить встречу, если хотите организовать встречу. Для завершения нашего диалога скажите: Пока.',
                    "Говорите: Назначить встречу, если вы хотите сделать встречу. Для завершения моей работы скажите: пока."],
             'info': ['Я помогу организовать вам встречи с другими людьми и разослать им приглашения на Яндекс почту и ВКонтакте.',
                   'Я ваш персональный помощник, который поможет вам быстро организовать встречи и разослать приглашения на Яндекс почту и ВКонтакте',
                   'Я твой помощник. Если тебе надо организовать встречу, обратись ко мне. Я разошлю приглашения на Яндекс почту и Вконтакте']}


def handler(event, context):
    """
        Точка входа для бессерверной функции.
        :param event: запрос полезной нагрузки.
        :param context: информация о текущем контексте выполнения.
        :return: ответ будет сериализован как JSON.
    """
    random.seed(event['session']['message_id'])
    return_response = {
        'version': event['version'],
        'session': event['session'],
        'response': {'end_session': False}
    }

    if event['request']['original_utterance']:
        # Проверяем, есть ли содержимое
        return_response['response']['text'], return_response['response']['end_session'] = answer(
            event['request']['original_utterance'])
    else:
        # Если это первое сообщение, то представляем навык
        return_response['response'][
            'text'] = "Привет, Я один из полезных навыков Алисы. Для того чтобы ознакомиться с моим функционалом " \
                      "скажите: Что ты умеешь? Для получения помощи скажите: Помощь."
        return_response['response']['buttons'] = [
        {
            "title": "Что ты умеешь?",
            "payload": {},
            "hide": False
        },
        {
            "title": "Помощь",
            "payload": {},
            "hide": False
        },
            
        ]
        

    return return_response


def answer(user_text):
    """
        Ответы Алисы на запросы пользователя, кроме главной логики навыка ( создание встречи )
        :param user_text: введеный пользователем запрос
        :return: ответ Алисы на запрос в виде строки str, и с остояние сессии bool
    """

    user_text_command = user_text.lower().rstrip('.') # Предобработка введённого пользователем запроса.


    if user_text_command in commands['info']:
        # Пользователь интересуется функционалом навыка Алисы
        return random.choice(answering['info']), False

    elif user_text_command in commands['help']:
        # Пользователь просит помощь
        return (random.choice(answering['help']), False)

    elif user_text_command in commands['start']:
        # Пользователь решил создать встречу.
        return 'Данный навык еще не разработан. Команда разработки очень стараеться над его разработкой. Приносим свои извинения =('
    elif user_text_command in commands['end']:
        # Пользователь решил закончить диалог
        return 'Спасибо что воспользовались данным навыком. Приятного дня!', True
    else:
        # Обработка инных запросов пользователя
        return 'К сожалению не удалось распознать команду, пожалуйста, повторите запрос!', False



def vk_mailing():
    """
    Алиса запрашивает номера пользователей, которым будет отправлена рассыка. Проверяет корректность введеных данных
    (уточняет их у пользователя).

    В результате функция делает рассылку встречи пользователям.
    :return: Возвращает текст str (если пользователей ввёл корректно данные,
             то Алиса сообщает о успешно выполненной операции, иначе просит повторить действие.
    """
    pass


def yandex_mailing():
    """
    Алиса запрашивает имена (почты) пользователей, которым будет отправлена рассыка. Проверяет корректность введеных
    данных (уточняет их у пользователя).

    В результате функция делает рассылку встречи пользователям.
    :return: Возвращает текст str (если пользователей ввёл корректно данные,
             то Алиса сообщает о успешно выполненной операции, иначе просит повторить действие.
    """
    pass
